// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int       @id @default(autoincrement())
  usercode    String    @unique
  password    String
  name        String
  phoneNumber String?   @db.VarChar(20)
  //role        String    @default("admin") // admin / manager / viewer
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)

  adminLogs AdminLog[]
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     Int
  action      String // e.g., "create", "update", "delete"
  description String?
  createdAt   DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])

  @@map("admin_logs")
}

model Project {
  id            Int         @id @default(autoincrement())
  title         String
  areaSize      Int
  type          ProjectType
  description   String?
  durationWeeks Int?
  reviews       String?
  imageUrl      String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)

  projectImages ProjectImage[]

  @@index([isDeleted])
  @@index([type, areaSize])
  @@map("projects")
}

enum ProjectType {
  RESIDENCE // 주거공간
  MERCANTILE // 상업공간
  ARCHITECTURE // 건축물
}

model ProjectImage {
  id        Int @id @default(autoincrement())
  projectId Int
  imageId   Int

  project Project @relation(fields: [projectId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)

  imageKeywords ProjectImageKeyword[]

  @@unique([imageId, projectId])
  @@map("project_images")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  projectImages   ProjectImage[]
  companyImages   CompanyImage[]
  showroomImages  ShowroomImage[]
  furnitureImages FurnitureImage[]

  @@map("image_urls")
}

model ProjectImageKeyword {
  projectId Int
  imageId   Int
  keywordId Int

  projectImage ProjectImage @relation(fields: [imageId, projectId], references: [imageId, projectId], onDelete: Cascade)
  keyword      Keyword      @relation(fields: [keywordId], references: [id])

  @@id([projectId, imageId, keywordId])
  @@map("project_image_keywords")
}

model Keyword {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())

  imageKeywords ProjectImageKeyword[]

  @@index([name])
  @@map("keywords")
}

model Company {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  description  String?
  imageUrl     String?
  naverBlogUrl String?  @map("naver_blog_url")
  instagramUrl String?  @map("instagram_url")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)

  companyImages CompanyImage[]

  @@map("companies")
}

model CompanyImage {
  companyId Int
  imageId   Int

  image   Image   @relation(fields: [imageId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@id([imageId, companyId])
  @@map("company_images")
}

model ConsultingRequest {
  id           Int      @id @default(autoincrement())
  customerName String   @map("customer_name") @db.VarChar(100)
  phoneNumber  String   @map("phone_number") @db.VarChar(20)
  email        String   @db.VarChar(100)
  address      String   @db.VarChar(255)
  type         String   @db.VarChar(100)
  areaSize     String   @map("area_size") @db.VarChar(50)
  isAgreeTerms Boolean  @default(false) @map("is_agree_terms")
  createdAt    DateTime @default(now())
}

model Showroom {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  address         String   @db.VarChar(255)
  phoneNumber     String?  @db.VarChar(20)
  description     String?
  introText       String?  @map("intro_text") @db.Text
  mapUrl          String?  @map("map_url") @db.Text
  imageUrl        String?
  openMinutes     Int?
  closeMinutes    Int?
  weeklyOpenDays  String?  @map("weekly_open_days") @db.Text // e.g., "Mon,Tue,Wed,Thu,Fri"
  weeklyCloseDays String?  @map("weekly_close_days") @db.Text // e.g., "Sat,Sun"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)

  showroomImages ShowroomImage[]

  @@map("showrooms")
}

model ShowroomImage {
  showroomId Int
  showroom   Showroom @relation(fields: [showroomId], references: [id])
  imageId    Int

  image Image @relation(fields: [imageId], references: [id])

  @@id([showroomId, imageId])
  @@map("showroom_images")
}

model Furniture {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  address     String   @db.VarChar(255)
  phoneNumber String?  @db.VarChar(20)
  description String?
  introText   String?  @map("intro_text") @db.Text
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  furnitureImages FurnitureImage[]

  @@map("furnitures")
}

model FurnitureImage {
  furnitureId Int
  imageId     Int

  furniture Furniture @relation(fields: [furnitureId], references: [id])
  image     Image     @relation(fields: [imageId], references: [id])

  @@id([furnitureId, imageId])
  @@map("furniture_images")
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("notices")
}
