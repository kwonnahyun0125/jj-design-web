// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int       @id @default(autoincrement())
  usercode    String    @unique
  password    String
  name        String
  phoneNumber String?   @db.VarChar(20)
  //role        String    @default("admin") // admin / manager / viewer
  isActive    Boolean   @default(true)
  lastLoginAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isDeleted   Boolean   @default(false)

  adminLogs AdminLog[]
}

model AdminLog {
  id          Int      @id @default(autoincrement())
  adminId     Int
  action      String // e.g., "create", "update", "delete"
  description String?
  createdAt   DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])

  @@map("admin_logs")
}

model Project {
  id          Int       @id @default(autoincrement())
  title       String
  size        Int
  category    Category  @default(RESIDENCE)
  description String?
  duration    Int?
  lineup      Lineup    @default(FULL)
  keywords    Keyword[]
  review      String?
  imageUrl    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  isDeleted   Boolean   @default(false)

  images ProjectImage[]
  tags   ProjectTag[]

  @@index([isDeleted])
  @@index([category, size])
  @@map("projects")
}

enum Category {
  RESIDENCE
  MERCANTILE
  ARCHITECTURE
}

enum Lineup {
  FULL
  PARTIAL
}

enum Keyword {
  APART
  HOUSE
  COMMERCIAL
  NEW
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  projects ProjectTag[]
  images   ProjectImage[]
}

model ProjectTag {
  projectId Int
  tagId     Int

  project Project @relation(fields: [projectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([projectId, tagId])
  @@map("project_tags")
}

model ProjectImage {
  id        Int @id @default(autoincrement())
  projectId Int
  imageId   Int
  tagId     Int

  project Project @relation(fields: [projectId], references: [id])
  image   Image   @relation(fields: [imageId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@unique([imageId, projectId])
  @@map("project_images")
}

model Image {
  id        Int      @id @default(autoincrement())
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  projectImages   ProjectImage[]
  companyImages   CompanyImage[]
  showroomImages  ShowroomImage[]
  furnitureImages FurnitureImage[]

  @@map("image_urls")
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  owner     String
  email     String
  address   String   @db.VarChar(255)
  phone     String   @db.VarChar(20)
  business  String   @db.VarChar(100)
  naver     String
  instagram String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  companyImages CompanyImage[]

  @@map("companies")
}

model CompanyImage {
  companyId Int
  imageId   Int

  image   Image   @relation(fields: [imageId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@id([imageId, companyId])
  @@map("company_images")
}

enum ConsultingType {
  RESIDENCE // 주거공간
  MERCANTILE // 상업공간
  ARCHITECTURE // 건축물
}

enum ConsultingStatus {
  UNCHECKED // 미확인
  CHECKED // 확인
  CONTACTED // 연락 완료
}

model Consulting {
  id            Int              @id @default(autoincrement())
  // 기본 정보
  name          String           @db.VarChar(100)
  phone         String           @db.VarChar(20)
  // 현장 정보
  address       String           @db.VarChar(255)
  type          ConsultingType   @default(RESIDENCE)
  size          String           @db.VarChar(50)
  budget        String           @db.VarChar(50)
  preferredDate DateTime
  // 참고자료
  note          String?
  // 기타
  isAgreeTerms  Boolean          @default(false)
  status        ConsultingStatus @default(UNCHECKED)
  createdAt     DateTime         @default(now())
}

model Showroom {
  id              Int      @id @default(autoincrement())
  name            String   @unique
  address         String   @db.VarChar(255)
  phoneNumber     String?  @db.VarChar(20)
  description     String?
  introText       String?  @map("intro_text") @db.Text
  mapUrl          String?  @map("map_url") @db.Text
  imageUrl        String?
  openMinutes     Int?
  closeMinutes    Int?
  weeklyOpenDays  String?  @map("weekly_open_days") @db.Text // e.g., "Mon,Tue,Wed,Thu,Fri"
  weeklyCloseDays String?  @map("weekly_close_days") @db.Text // e.g., "Sat,Sun"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  isDeleted       Boolean  @default(false)

  showroomImages ShowroomImage[]

  @@map("showrooms")
}

model ShowroomImage {
  showroomId Int
  showroom   Showroom @relation(fields: [showroomId], references: [id])
  imageId    Int

  image Image @relation(fields: [imageId], references: [id])

  @@id([showroomId, imageId])
  @@map("showroom_images")
}

model Furniture {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  address     String   @db.VarChar(255)
  phoneNumber String?  @db.VarChar(20)
  description String?
  introText   String?  @map("intro_text") @db.Text
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  furnitureImages FurnitureImage[]

  @@map("furnitures")
}

model FurnitureImage {
  furnitureId Int
  imageId     Int

  furniture Furniture @relation(fields: [furnitureId], references: [id])
  image     Image     @relation(fields: [imageId], references: [id])

  @@id([furnitureId, imageId])
  @@map("furniture_images")
}

model Notice {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@map("notices")
}
